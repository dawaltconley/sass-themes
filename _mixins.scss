//// Mixins for defining themes.
//// @group mixins

@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use 'styles/theme';
@use 'scss-properties';
@use 'sass-color-helpers/stylesheets/color-helpers' as ch;

/// Defines the default accessibility for all mixins. Can be `AA`, `AAA`, or `false`.
/// @example scss
///   @use 'sass-themes' with ($accessibility: 'AAA');
$accessibility: 'AA' !default;

/// Turns a string into a class name. Leaves strings formatted as selectors unmodified.
/// @param {String} $str
/// @return {String}
/// @access private
@function _classify($str) {
    $look-for: '.' '#' '*' ',' '>' '+' '~' '[' ':';
    @each $char in $look-for {
        @if string.index($str, $char) {
            @return $str;
        }
    }
    @return '.#{$str}';
}

/// Defines the CSS properties for a theme class. Uses the `define` mixin from the [scss-properties library](https://github.com/dawaltconley/scss-properties).
///
/// @param {Color} $text
/// @param {Color} $bg
/// @param {Color} $brand [null]
/// @param {'AAA'|'AA'|false} $accessibility [$accessibility] - The accessibility standard to check this themes colors against.
///
/// @output
/// Output is simplified for readability. Actual output shown in comments.
/// ```scss
/// body, .light {
///   --light-theme:      1;                                          // 1 if text color is darker than background, else 0
///   --dark-theme:       0;                                          // opposite --light-theme
///   --theme-text:       #111;                                       // hsla(var(--theme-text-h), var(--theme-text-s), var(--theme-text-l), var(--theme-text-a));
///   --theme-bg:         white;                                      // hsla(var(--theme-bg-h), var(--theme-bg-s), var(--theme-bg-l), var(--theme-bg-a));
///   --theme-brand:      royalblue                                   // hsla(var(--theme-brand-h), var(--theme-brand-s), var(--theme-brand-l), var(--theme-brand-a));
///   --button-text:      if($brand and not $light-theme, $text, $bg) // hsla(var(--button-text-h), var(--button-text-s), var(--button-text-l), var(--button-text-a));
///   --button-bg:        $brand or $text                             // hsla(var(--button-bg-h), var(--button-bg-s), var(--button-bg-l), var(--button-bg-a));
///   --theme-text-light: #{scss-properties.mix(                      // rgba(calc((var(--theme-text-r) * (0.58 + (0.18 * var(--theme-dark)))) + (var(--theme-bg-r) * (1 - (0.58 + (0.18 * var(--theme-dark)))))),
///                         --theme-text,                             //      calc((var(--theme-text-g) * (0.58 + (0.18 * var(--theme-dark)))) + (var(--theme-bg-g) * (1 - (0.58 + (0.18 * var(--theme-dark)))))),
///                         --theme-bg,                               //      calc((var(--theme-text-b) * (0.58 + (0.18 * var(--theme-dark)))) + (var(--theme-bg-b) * (1 - (0.58 + (0.18 * var(--theme-dark)))))),
///                         '(0.58 + (0.18 * var(--theme-dark)))'     //      calc((var(--theme-text-a) * (0.58 + (0.18 * var(--theme-dark)))) + (var(--theme-bg-a) * (1 - (0.58 + (0.18 * var(--theme-dark)))))));
///                       )};
///
///   color:              var(--theme-text);
///   background-color:   var(--theme-bg);
///   border-color:       var(--theme-text);
/// }
/// ```

@mixin _create($text, $bg, $brand: null, $accessibility: $accessibility) {
    $light-theme: color.lightness($text) < color.lightness($bg);

    $properties: (
        --theme-text: $text,
        --theme-bg: $bg,
        --button-bg: $brand or $text,
        --button-text: if($brand and not $light-theme, $text, $bg), // should be a matter of which color (text, bg) has best contrast ratio on brand color (with white / back fallback); // null if no brand? as in: $brand and $color-determined-by-contrast
    );
    @if $brand {
        $properties: map.merge($properties, (
            --theme-brand: $brand
        ));
    }

    @include scss-properties.define($properties);

    --theme-light: #{if($light-theme, 1, 0)};
    --theme-dark: #{if($light-theme, 0, 1)};
    --theme-text-light: #{scss-properties.mix(--theme-text, --theme-bg, '(0.58 + (0.18 * var(--theme-dark)))')};

    @extend %theme;
}

/// Wrapper for `_create`, which normalizes arguments and keyword aliases before creating a theme. Must define at least a text and a background color.
///
/// @param {Color} $text          - Aliases: `$text-color`, `$--theme-text`
/// @param {Color} $bg            - Aliases: `$background`, `$background-color`, `$--theme-bg`
/// @param {Color} $brand [null]  - Aliases: `$brand-color`, `$--theme-brand`
/// @param {'AAA'|'AA'|false} $accessibility [$accessibility] - The accessibility standard to check this themes colors against.
///
/// @param {Map} $keywords [null] - A map that sets multiple the parameter values if passed as the only argument.
///
/// @require {mixin} _create
/// @require {mixin} accessibility
/// @require $accessibility
/// @require %theme
///
/// @example scss
///   @use 'sass-themes';
///
///   body, .light {
///     // using keyword arguments
///     @include sass-themes.create(
///       $text:  #111,
///       $bg:    white,
///       $brand: royalblue
///     )
///   }
///   
///   .dark {
///     // using a map of keyword arguments
///     @include sass-themes.create((
///       --theme-text:   white;
///       --theme-bg:     #111;
///       --theme-brand:  royalblue;
///     ));
///   }
///
/// @example scss
///   @use 'sass-themes';
///
///   @include sass-themes.create((
///     // using a map of class names and keyword arguments
///     'light': (
///         --theme-text:   #111,
///         --theme-bg:     white,
///         --theme-brand:  royalblue ),
///     'dark': (
///         --theme-text:   white,
///         --theme-bg:     #111,
///         --theme-brand:  royalblue )));

@mixin create($args...) {
    $kwargs: meta.keywords($args);
    @if list.length($args) == 1 and list.length(map.keys($kwargs)) == 0 {
        // if there's a single map argument, treat it as a map of keyword arguments
        $first-arg: list.nth($args, 1);
        @if meta.type-of($first-arg) == 'map' {
            $kwargs: $first-arg;
        }
    } @else {
        // override $kwargs with any positional arguments
        @each $key, $value in list.zip(('text', 'background', 'brand'), $args) {
            $kwargs: map.set($kwargs, $key, $value);
        }
    }

    @if meta.type-of(list.nth(map.values($kwargs), 1)) == 'map' {
        // if the value of the first keyword is a map, treat it as a map of theme names and settings. create classes accordingly
        @each $name, $settings in $kwargs {
            #{_classify($name)} {
                @include create($settings);
            }
        }
    } @else {
        $text:          map.get($kwargs, color) or map.get($kwargs, text-color) or map.get($kwargs, text) or map.get($kwargs, --theme-text);
        $bg:            map.get($kwargs, background-color) or map.get($kwargs, background) or map.get($kwargs, bg) or map.get($kwargs, --theme-bg);
        $brand:         map.get($kwargs, brand-color) or map.get($kwargs, brand) or map.get($kwargs, --theme-brand);
        $accessibility: map.get($kwargs, accessibility) or $accessibility;

        @if not ($text and $bg) {
            @error 'theme must specify at least text and background colors: #{&}';
        }

        @if $accessibility {
            @include accessibility(
            $name: #{&},
            $text: $text,
            $bg: $bg,
            $brand: $brand,
            $accessibility: $accessibility,
            );
        }

        @include _create($text, $bg, $brand, $accessibility);
    }
}

/// @alias create
@mixin theme($args...) {
    @include create($args...);
}

/// @alias create
@mixin define($args...) {
    @include create($args...);
}

/// @alias create
@mixin build($args...) {
    @include create($args...);
}

/// Checks the color contrast ratios against the WCAG standards. Throws a warning when the provided colors do not meet the standard.
/// @param {Color} $text
/// @param {Color} $bg
/// @param {Color} $brand [null]
/// @param {'AAA'|'AA'|false} $accessibility [$accessibility] - The accessibility standard to check this themes colors against.

@mixin accessibility($name, $bg, $text, $brand: null, $accessibility: $accessibility) {
    $aa: string.to-upper-case($accessibility) == 'AA';
    $aaa: string.to-upper-case($accessibility) == 'AAA';

    $ct-tx-bg: ch.ch-color-contrast($bg, $text);

    @if ($ct-tx-bg < 4.5 and $aa) or ($ct-tx-bg < 7 and $aaa) {
        @warn "The contrast ratio of the '#{$name}' theme's text (#{$text}) and background (#{$bg}) colors is #{$ct-tx-bg}, which does not meet WCAG 2.0 #{if($aaa, "AAA standard (7)", "AA standard (4.5)")}.";
    }

    @if $brand {
        $ct-br-tx: ch.ch-color-contrast($brand, $text);
        $ct-br-bg: ch.ch-color-contrast($brand, $bg);

        @if $ct-br-tx < 3 and $aa {
            @warn "The contrast ratio of the '#{$name}' theme's link (#{$brand}) and text (#{$text}) colors is #{$ct-br-tx}, which does not meet WCAG 2.0 AA standard (3).";
        }
        @if ($ct-br-bg < 4.5 and $aa) or ($ct-br-bg < 7 and $aaa) {
            @warn "The contrast ratio of the '#{$name}' theme's link (#{$brand}) and background (#{$bg}) colors is #{$ct-br-bg}, which does not meet WCAG 2.0 #{if($aaa, "AAA standard (7)", "AA standard (4.5)")}.";
        }
    }
}
