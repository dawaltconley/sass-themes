@use "sass:color";
@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use 'scss-properties' as color-props;
@use "sass-color-helpers/stylesheets/color-helpers" as ch;

$accessibility: 'AA' !default;

@function _classify($str) {
    $look-for: '.' '#' '*' ',' '>' '+' '~' '[' ':';
    @each $char in $look-for {
        @if string.index($str, $char) {
            @return $str;
        }
    }
    @return '.#{$str}';
}

@mixin accessibility($name, $background-color, $text-color, $brand-color: null, $accessibility: $accessibility) {
    $aa: string.to-upper-case($accessibility) == "AA";
    $aaa: string.to-upper-case($accessibility) == "AAA";

    $ct-tx-bg: ch.ch-color-contrast($background-color, $text-color);

    @if ($ct-tx-bg < 4.5 and $aa) or ($ct-tx-bg < 7 and $aaa) {
        @warn "The contrast ratio of the '#{$name}' theme's text (#{$text-color}) and background (#{$background-color}) colors is #{$ct-tx-bg}, which does not meet WCAG 2.0 #{if($aaa, "AAA standard (7)", "AA standard (4.5)")}.";
    }

    @if $brand-color {
        $ct-br-tx: ch.ch-color-contrast($brand-color, $text-color);
        $ct-br-bg: ch.ch-color-contrast($brand-color, $background-color);

        @if $ct-br-tx < 3 and $aa {
            @warn "The contrast ratio of the '#{$name}' theme's link (#{$brand-color}) and text (#{$text-color}) colors is #{$ct-br-tx}, which does not meet WCAG 2.0 AA standard (3).";
        }
        @if ($ct-br-bg < 4.5 and $aa) or ($ct-br-bg < 7 and $aaa) {
            @warn "The contrast ratio of the '#{$name}' theme's link (#{$brand-color}) and background (#{$background-color}) colors is #{$ct-br-bg}, which does not meet WCAG 2.0 #{if($aaa, "AAA standard (7)", "AA standard (4.5)")}.";
        }
    }
}

%theme {
    color: var(--theme-text);
    background-color: var(--theme-bg);
    border-color: var(--theme-text);
}

@mixin theme($text: null, $bg: null, $brand: null, $accessibility: $accessibility, $settings: null) {
    @if meta.type-of($text) == 'map' {
        $settings: $text;
    }
    @if $settings {
        $bg: map.get($settings, background-color) or map.get($settings, background) or map.get($settings, bg) or map.get($settings, --theme-bg);
        $text: map.get($settings, color) or map.get($settings, text-color) or map.get($settings, text) or map.get($settings, --theme-text);
        $brand: map.get($settings, brand-color) or map.get($settings, brand) or map.get($settings, --theme-brand);
    }

    @if not ($text and $bg) {
        @error 'theme must specify at least text and background colors: #{&}';
    }

    @if $accessibility {
        @include accessibility(
            $name: #{&},
            $background-color: $bg,
            $text-color: $text,
            $brand-color: $brand,
            $accessibility: $accessibility,
        );
    }

    $light-theme: color.lightness($text) < color.lightness($bg);

    $properties: (
        --theme-text: $text,
        --theme-bg: $bg,
        --button-bg: $brand or $text,
        --button-text: if($brand and not $light-theme, $text, $bg), // should be a matter of which color (text, bg) has best contrast ratio on brand color (with white / back fallback); // null if no brand? as in: $brand and $color-determined-by-contrast
    );
    @if $brand {
        $properties: map.merge($properties, (
            --theme-brand: $brand
        ));
    }

    @include color-props.define($properties);

    --theme-light: #{if($light-theme, 1, 0)};
    --theme-dark: #{if($light-theme, 0, 1)};
    --theme-text-light: #{color-props.mix(--theme-text, --theme-bg, '(0.58 + (0.18 * var(--theme-dark)))')};

    @extend %theme;
}

@mixin build($themes, $accessibility: $accessibility) {
    @each $theme, $settings in $themes {
        #{_classify($theme)} {
            @include theme($settings, $accessibility: $accessibility);
        }
    }
}
