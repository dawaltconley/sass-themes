@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:selector";
@use "sass:string";
@use "color-helpers" as ch;

$theme-depth: 1 !default; // controls the depth (in a series nested themes) at which an element still inherits the styles of its immediate ancestor theme. stylesheets get much larger and more complex as this number increases, so it should be set as low as possible.
$theme-classes: ();

//
// Utility Functions
//

@function classify($str) {
    $look-for: '.' '#' '*' ',' '>' '+' '~' '[' ':';
    @each $char in $look-for {
        @if string.index($str, $char) {
            @return $str;
        }
    }
    @return '.#{$str}';
}

@function ld($color1, $color2) {
    @return math.div(math.abs(color.lightness($color1) - color.lightness($color2)), 100%);
}

@function nest($theme, $depth: $theme-depth, $themes: $theme-classes) {
    $selectors: $theme;
    @each $other-theme in map.keys($themes) {
        @if $other-theme != $theme {
            $ancestry: ();
            @for $d from 0 to $theme-depth {
                $new-nest: selector.nest($other-theme, $theme);
                $ancestry: list.append($ancestry, $new-nest, "space");
                $selectors: list.append($selectors, $ancestry, "comma");
            }
        }
    }
    @return #{$selectors};
}

//
// Utility Mixins
//

@mixin accessibility($name, $background-color, $text-color, $brand-color: null, $accessibility: "AA") {
    $aa: string.to-upper-case($accessibility) == "AA";
    $aaa: string.to-upper-case($accessibility) == "AAA";

    $ct-tx-bg: ch.ch-color-contrast($background-color, $text-color);

    @if ($ct-tx-bg < 4.5 and $aa) or ($ct-tx-bg < 7 and $aaa) {
        @warn "The contrast ratio of the '#{$name}' theme's text (#{$text-color}) and background (#{$background-color}) colors is #{$ct-tx-bg}, which does not meet WCAG 2.0 #{if($aaa, "AAA standard (7)", "AA standard (4.5)")}.";
    }

    @if $brand-color {
        $ct-br-tx: ch.ch-color-contrast($brand-color, $text-color);
        $ct-br-bg: ch.ch-color-contrast($brand-color, $background-color);

        @if $ct-br-tx < 3 and $aa {
            @warn "The contrast ratio of the '#{$name}' theme's link (#{$brand-color}) and text (#{$text-color}) colors is #{$ct-br-tx}, which does not meet WCAG 2.0 AA standard (3).";
        }
        @if ($ct-br-bg < 4.5 and $aa) or ($ct-br-bg < 7 and $aaa) {
            @warn "The contrast ratio of the '#{$name}' theme's link (#{$brand-color}) and background (#{$background-color}) colors is #{$ct-br-bg}, which does not meet WCAG 2.0 #{if($aaa, "AAA standard (7)", "AA standard (4.5)")}.";
        }
    }
}

@mixin register($name, $settings: null, $bg: null, $text: null, $brand: null, $accessibility: null) {
    $bg: $bg or $settings and map.get($settings, background-color) or map.get($settings, background) or map.get($settings, bg);
    $text: $text or $settings and map.get($settings, color) or map.get($settings, text-color) or map.get($settings, text);
    $brand: $brand or $settings and map.get($settings, brand-color) or map.get($settings, brand);

    @if not ($bg and $text) {
        @error 'Invalid theme #{$name}; themes require at least a background and text color.'
    }

    $light-theme: color.lightness($text) < color.lightness($bg);
    // $ld-tx-bg: ld($text, $bg);
    // $ld-br-tx: $brand and ld($brand, $text);
    // $ld-br-bg: $brand and ld($brand, $bg);

    $text-light: color.mix($text, $bg, if($light-theme, 58%, 86%));
    $button-color: $brand or $text;
    $button-text: if($brand and not $light-theme, $text, $bg);

    $accessibility: $accessibility or $settings and map.get($settings, accessibility) or "AA";
    @include accessibility(
        $name: $name,
        $background-color: $bg,
        $text-color: $text,
        $brand-color: $brand,
        $accessibility: $accessibility,
    );

    $theme-classes: map.merge($theme-classes, classify($name), (
        light: $light-theme,
        dark: not $light-theme,
        text: $text,
        text-light: $text-light,
        bg: $bg,
        brand: $brand,
        button: (
            bg: $button-color,
            text: $button-text
        ),
    )) !global;
}

//
// Primary Exports
//

@mixin theme($class: &, $settings: null, $bg: null, $text: null, $brand: null, $depth: $theme-depth) {
    $class: list.nth($class, list.length($class));
    $class: list.nth($class, list.length($class));
    $class: classify($class);

    @if not map.has-key($theme-classes, $class) {
        @include register($class, $settings, $bg, $text, $brand);
    }

    @at-root #{nest($class, $depth: $depth)} {
        $theme: map.get($theme-classes, $class);
        background-color: map.get($theme, bg);
        color: map.get($theme, text);
        border-color: map.get($theme, text);
    }
}

@mixin constructor($themes, $depth: $theme-depth) {
    @each $theme, $settings in $themes {
        @include register($theme, $settings);
    }
    @each $theme, $settings in $themes {
        @include theme($theme, $settings);
    }
}

@mixin themeify($themes: $theme-classes, $depth: $theme-depth) {
    // @if $themes
    @each $class, $theme in $theme-classes {
        $group: ();
        $class: nest($class, $themes: $themes, $depth: $depth);
        @each $selector in & {
            $group: list.append($group, selector.nest($class, $selector), "comma");
            $group: list.append($group, selector.unify($class, $selector), "comma");
        }
        @at-root #{$group} {
            @content($theme);
        }
    }
}
