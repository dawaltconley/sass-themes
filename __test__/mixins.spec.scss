@use '../node_modules/sass-true/sass/true' as *;

@use '../mixins' as themes with (
  $accessibility: false
);

@mixin result {
  // prettier-ignore
  .light {
    --theme-tx: hsla(var(--theme-tx-h), var(--theme-tx-s), var(--theme-tx-l), var(--theme-tx-a));
    --theme-tx-r: 17;
    --theme-tx-g: 17;
    --theme-tx-b: 17;
    --theme-tx-h: 0deg;
    --theme-tx-s: 0%;
    --theme-tx-l: 6.6666666667%;
    --theme-tx-a: 1;
    --theme-bg: hsla(var(--theme-bg-h), var(--theme-bg-s), var(--theme-bg-l), var(--theme-bg-a));
    --theme-bg-r: 255;
    --theme-bg-g: 255;
    --theme-bg-b: 255;
    --theme-bg-h: 0deg;
    --theme-bg-s: 0%;
    --theme-bg-l: 100%;
    --theme-bg-a: 1;
    --button-bg: hsla(var(--button-bg-h), var(--button-bg-s), var(--button-bg-l), var(--button-bg-a));
    --button-bg-r: 0;
    --button-bg-g: 0;
    --button-bg-b: 255;
    --button-bg-h: 240deg;
    --button-bg-s: 100%;
    --button-bg-l: 50%;
    --button-bg-a: 1;
    --button-text: hsla(var(--button-text-h), var(--button-text-s), var(--button-text-l), var(--button-text-a));
    --button-text-r: 255;
    --button-text-g: 255;
    --button-text-b: 255;
    --button-text-h: 0deg;
    --button-text-s: 0%;
    --button-text-l: 100%;
    --button-text-a: 1;
    --theme-br: hsla(var(--theme-br-h), var(--theme-br-s), var(--theme-br-l), var(--theme-br-a));
    --theme-br-r: 0;
    --theme-br-g: 0;
    --theme-br-b: 255;
    --theme-br-h: 240deg;
    --theme-br-s: 100%;
    --theme-br-l: 50%;
    --theme-br-a: 1;
    --theme-light: 1;
    --theme-dark: 0;
    --theme-tx--light: rgba(calc((var(--theme-tx-r) * (0.58 + (0.18 * var(--theme-dark)))) + (var(--theme-bg-r) * (1 - (0.58 + (0.18 * var(--theme-dark)))))), calc((var(--theme-tx-g) * (0.58 + (0.18 * var(--theme-dark)))) + (var(--theme-bg-g) * (1 - (0.58 + (0.18 * var(--theme-dark)))))), calc((var(--theme-tx-b) * (0.58 + (0.18 * var(--theme-dark)))) + (var(--theme-bg-b) * (1 - (0.58 + (0.18 * var(--theme-dark)))))), calc((var(--theme-tx-a) * (0.58 + (0.18 * var(--theme-dark)))) + (var(--theme-bg-a) * (1 - (0.58 + (0.18 * var(--theme-dark)))))));
  }
}

@include describe('create') {
  @include describe('argument aliases') {
    @include it('creates a theme with positional arguments') {
      @include assert {
        @include output {
          .light {
            @include themes.create(#111, white, blue);
          }
        }
        @include expect {
          @include result;
        }
      }
    }
    @include it('creates a theme with positional and keyword arguments') {
      @include assert {
        @include output {
          .light {
            @include themes.create(#111, $brand: blue, $background: white);
          }
        }
        @include expect {
          @include result;
        }
      }
    }
    @include it('creates a theme with $text, $bg, $brand keywords') {
      @include assert {
        @include output {
          .light {
            @include themes.create($text: #111, $bg: white, $brand: blue);
          }
        }
        @include expect {
          @include result;
        }
      }
    }
    @include it('creates a theme with $text, $background, $brand keywords') {
      @include assert {
        @include output {
          .light {
            @include themes.create(
              $text: #111,
              $background: white,
              $brand: blue
            );
          }
        }
        @include expect {
          @include result;
        }
      }
    }
    @include it(
      'creates a theme with $text-color, $background-color, $brand-color keywords'
    ) {
      @include assert {
        @include output {
          .light {
            @include themes.create(
              $text-color: #111,
              $background-color: white,
              $brand-color: blue
            );
          }
        }
        @include expect {
          @include result;
        }
      }
    }
    @include it(
      'creates a theme with $--theme-tx, $--theme-bg, $--theme-br keywords'
    ) {
      @include assert {
        @include output {
          .light {
            @include themes.create(
              $--theme-tx: #111,
              $--theme-bg: white,
              $--theme-br: blue
            );
          }
        }
        @include expect {
          @include result;
        }
      }
    }
    @include it('creates a theme with text, bg, brand map keys') {
      @include assert {
        @include output {
          .light {
            @include themes.create(
              (
                text: #111,
                bg: white,
                brand: blue,
              )
            );
          }
        }
        @include expect {
          @include result;
        }
      }
    }
    @include it('creates a theme with text, background, brand map keys') {
      @include assert {
        @include output {
          .light {
            @include themes.create(
              (
                text: #111,
                background: white,
                brand: blue,
              )
            );
          }
        }
        @include expect {
          @include result;
        }
      }
    }
    @include it(
      'creates a theme with text-color, background-color, brand-color map keys'
    ) {
      @include assert {
        @include output {
          .light {
            @include themes.create(
              (
                text-color: #111,
                background-color: white,
                brand-color: blue,
              )
            );
          }
        }
        @include expect {
          @include result;
        }
      }
    }
    @include it(
      'creates a theme with --theme-tx, --theme-bg, --theme-br map keys'
    ) {
      @include assert {
        @include output {
          .light {
            @include themes.create(
              (
                --theme-tx: #111,
                --theme-bg: white,
                --theme-br: blue,
              )
            );
          }
        }
        @include expect {
          @include result;
        }
      }
    }
    @include it('creates a theme using a map of names and settings') {
      @include assert {
        @include output {
          $themes: (
            'light': (
              text-color: #111,
              background-color: white,
              brand-color: blue,
            ),
          );
          @include themes.create($themes);
        }
        @include expect {
          @include result;
        }
      }
    }
  }
}
