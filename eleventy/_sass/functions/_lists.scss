@function sort($list, $order: $default-order) {
    $sep: list-separator($list);
    $less:  ();
    $equal: ();
    $large: ();

    @if length($list) > 1 {
        $seed: nth($list, ceil(length($list) / 2));

        @each $item in $list {
            @if $item == $seed {
                $equal: append($equal, $item, $sep);
            } @else if _lt($item, $seed, $order) {
                $less: append($less, $item, $sep);
            } @else if not _lt($item, $seed, $order) {
                $large: append($large, $item, $sep);
            }
        }

        @return join(join(sort($less, $order), $equal, $sep), sort($large, $order), $sep);
    }

    @return $list;
}

@function sort-units($list, $order: $default-unit-order) {
    $sep: list-separator($list);
    $sorted: ();
    @each $unit in $order {
        $matches: ();
        @each $item in $list {
            @if unit($item) == $unit {
                $matches: append($matches, $item, $sep);
            }
        }
        @if length($matches) > 0 {
            $sorted: append($sorted, $matches, $sep);
        }
    }
    @return $sorted;
}

@function reverse($list, $recursive: false) {
    $sep: list-separator($list);
    $reversedList: ();
    @for $i from length($list) through 1 {
        $item: nth($list, $i);
        $recursive: $recursive and type-of($item) == list;
        $reversedList: append($reversedList, if($recursive, reverse($item, $recursive), $item), $sep);
    }
    @return $reversedList;
}

@function flatten($list, $recursive: false) {
    $sep: list-separator($list);
    $return: ();
    $max-l: 1;
    @each $sub-list in $list {
        $return: join($return, $sub-list, $sep);
        $max-l: max($max-l, length($sub-list));
    }
    @return if($recursive and $max-l > 1, flatten($return), $return);
}

@function unique($list) {
    $sep: list-separator($list);
    $return: ();
    @each $item in $list {
        @if not(index($return, $item)) {
            $return: append($return, $item, $sep);
        }
    }
    @return $return;
}

@function join-str($list, $str) {
    $return: "";
    @for $i from 1 to length($list) {
        $return: $return + nth($list, $i) + $str;
    }
    $return: $return + nth($list, length($list));
    @return $return;
}

@function insert-nth($list, $index, $value) {
    $result: null;

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
    } @else if $index < 1 {
        @warn "List index 0 must be a non-zero integer for `insert-nth`";
    } @else if $index > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
    } @else {
        $result: ();

        @for $i from 1 through length($list) {
            @if $i == $index {
                $result: append($result, $value);
            }

            $result: append($result, nth($list, $i));
        }
    }

    @return $result;
}

@function depth($list, $starting-depth: 1) {
    $depth: $starting-depth;

    @each $item in $list {
        @if type-of($item) == list {
            $depth: max($depth, depth($item, $starting-depth + 1));
        }
    }

    @return $depth;
}
